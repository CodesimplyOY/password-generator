apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName }}
  namespace: {{ .Values.appNamespace }}
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: {{ .Values.appName }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ .Values.appName }}
    spec:
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      {{- end }}
      containers:
      - image: "{{ .Values.image.name }}:{{ .Values.image.tag }}"
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: {{ .Values.securityContext.allowPrivilegeEscalation }}
          runAsGroup: {{ .Values.securityContext.runAsGroup }}
          runAsUser: {{ .Values.securityContext.runAsUser }}
          runAsNonRoot: {{ .Values.securityContext.runAsNonRoot }}
          readOnlyRootFilesystem: {{ .Values.securityContext.readOnlyRootFilesystem }}
          seccompProfile: {{ .Values.securityContext.seccompProfile }}
          capabilities: 
            drop:
            - "ALL"
        name: {{ .Values.appName }}
        ports:
        - containerPort: 8080
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /
            port: {{ .Values.service.targetPort }}
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          requests:
            cpu: {{ .Values.resources.requests.cpu }}
            memory: {{ .Values.resources.requests.memory }}
          limits:
            cpu: {{ .Values.resources.limits.cpu }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        env:
        - name: GIN_MODE
          value: {{ .Values.ginMode }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsGroup: {{ .Values.securityContext.runAsGroup }}
        runAsUser: {{ .Values.securityContext.runAsUser }}
        fsGroup: {{ .Values.securityContext.fsGroup }}
      terminationGracePeriodSeconds: 30
